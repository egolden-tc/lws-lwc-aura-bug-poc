import * as ESTree from 'estree';
import { AST, CreateLib, Lib } from './types';
declare const baseLib: {
    /**
     * String patterns are converted to arrays and expanded for document and
     * window aliases. For example:
     * ```js
     * ['window.top']
     * ```
     * expands to:
     * ```js
     * [
     *   ['window', 'top'],
     *   ['top'],
     *   ['document', 'defaultView', 'top'],
     *   ['frames', 'top'],
     *   ['globalThis', 'top'],
     *   ['self', 'top']
     * ]
     * ```
     */
    expandPatterns(patterns: Lib.SearchPatternArray | Lib.SearchPatternArray[]): Lib.SearchPatternArray[];
    getIdentifierName(node: ESTree.Identifier): string;
    getParent(node: AST.Node): AST.MaybeNode;
    getType(node: AST.Node): string;
    isMatchableNode(node: AST.MaybeNode): boolean;
    isNodeByAsteriskOrName(node: AST.MaybeNode, name: string): boolean;
    isNonComputedMemberExpressionNode(node: AST.MaybeNode): boolean;
    match(identifier: AST.IdentifierOrThisExpression, patterns: Lib.SearchPatternArray[] | Lib.SearchPattern): Lib.MatchData | undefined;
    matchAll(identifiers: AST.IdentifierOrThisExpression[], patterns: Lib.SearchPatternArray[] | Lib.SearchPattern): Lib.MatchData[];
};
export declare function createLib(overrides?: CreateLib.Overrides): typeof baseLib;
export * from './types';
//# sourceMappingURL=index.d.ts.map