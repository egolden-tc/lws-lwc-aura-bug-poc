import * as ESTree from 'estree';
interface MaybeParentExtension {
    parent?: Node;
}
export declare namespace AST {
    type IdentifierOrThisExpression = ESTree.Identifier | ESTree.ThisExpression;
    type Node = ESTree.Node & MaybeParentExtension;
    type MaybeNode = Node | undefined;
}
export declare namespace CreateLib {
    interface Overrides {
        expandPatterns?: (patterns: Lib.SearchPatternArray | Lib.SearchPatternArray[]) => Lib.SearchPatternArray[];
        getIdentifierName?: (node: ESTree.Identifier) => string;
        getParent?: (node: AST.Node) => AST.MaybeNode;
        getType?: (node: AST.Node) => string;
        isMatchableNode?: (node: AST.MaybeNode) => boolean;
        isNodeByAsteriskOrName?: (node: AST.MaybeNode, name: string) => boolean;
        isNonComputedMemberExpressionNode?: (node: AST.MaybeNode) => boolean;
        match?: (identifier: AST.IdentifierOrThisExpression, patterns: Lib.SearchPatternArray[] | Lib.SearchPattern) => Lib.MatchData | undefined;
    }
}
export declare namespace Lib {
    interface MatchData {
        identifier: AST.IdentifierOrThisExpression;
        node: AST.Node;
        pattern: SearchPatternString;
    }
    type SearchPattern = SearchPatternArray | SearchPatternString;
    type SearchPatternArray = string[];
    type SearchPatternString = string;
}
export {};
//# sourceMappingURL=types.d.ts.map