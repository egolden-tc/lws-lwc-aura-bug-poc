export declare const ArrayCtor: ArrayConstructor;
export declare const ArrayFrom: {
    <T>(arrayLike: ArrayLike<T>): T[];
    <T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
    <T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
    <T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
}, ArrayIsArray: (arg: any) => arg is any[];
export declare const ArrayProtoPush: (...items: any[]) => number;
export declare function ArrayConcat(arr: any[], ...args: Parameters<typeof Array.prototype.concat>): ReturnType<typeof Array.prototype.concat>;
export declare function ArrayFilter(arr: any[], iteratee: Function): ReturnType<typeof Array.prototype.filter>;
export declare function ArrayIncludes(arr: any[], value: any): ReturnType<typeof Array.prototype.includes>;
export declare function ArrayIndexOf(arr: any[], ...args: Parameters<typeof Array.prototype.indexOf>): ReturnType<typeof Array.prototype.indexOf>;
export declare function ArrayJoin(arr: any[], ...args: string[]): ReturnType<typeof Array.prototype.join>;
export declare function ArrayPush(arr: any[], ...args: Parameters<typeof Array.prototype.push>): ReturnType<typeof Array.prototype.push>;
export declare function ArrayShallowClone(arr: any[]): any[];
export declare function ArraySlice(arr: any[], ...args: number[]): ReturnType<typeof Array.prototype.slice>;
export declare function ArraySome(arr: any[], iteratee: Function): ReturnType<typeof Array.prototype.some>;
export declare const emptyArray: [];
//# sourceMappingURL=Array.d.ts.map